{"ast":null,"code":"import _slicedToArray from \"/Users/rashawndoyley/Desktop/HomeWork/googlebooks/develop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rashawndoyley/Desktop/HomeWork/googlebooks/develop/client/src/pages/Books.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport SearchForm from \"../components/Form/searchForm\";\nimport SearchResult from \"../components/Search/searchResult\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\"; // import { List, ListItem } from \"../components/List\";\n// import { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      search = _useState6[0],\n      setSearch = _useState6[1]; // // Load all books and store them with setBooks\n  // useEffect(() => {\n  //   loadBooks()\n  // }, [])\n  // // Loads all books and sets them to books\n  // function loadBooks() {\n  //   API.getBooks()\n  //     .then(res =>\n  //       setBooks(res.data)\n  //     )\n  //     .catch(err => console.log(err));\n  // };\n  // // Deletes a book from the database with a given id, then reloads books from the db\n  // function deleteBook(id) {\n  //   API.deleteBook(id)\n  //     .then(res => loadBooks())\n  //     .catch(err => console.log(err));\n  // }\n  // // Handles updating component state when the user types into the input field\n  //  handleInputChange=(event)=>{\n  //   const { name, value } = event.target;\n  //   setFormObject({...formObject, [name]: value})\n  // };\n  // // When the form is submitted, use the API.saveBook method to save the book data\n  // // Then reload books from the database\n\n\n  var handleFormSubmit = function handleFormSubmit(event) {\n    event.preventDefault();\n    API.googlebooks(search).then(function (res) {\n      console.log(\"res\", res.data.items);\n      var results = res.data.items;\n      results = results.map(function (result) {\n        console.log(result.volumeInfo);\n        result = {\n          key: result.id,\n          id: result.id,\n          title: result.volumeInfo.title,\n          author: result.volumeInfo.authors,\n          description: result.volumeInfo.description,\n          link: result.volumeInfo.infoLink\n        };\n        return result;\n      });\n      setBooks(results);\n      console.log(\"books\", books);\n    });\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    // Destructure the name and value properties off of event.target\n    // Update the appropriate state\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    console.log(name, value);\n    setSearch(value);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Find Your Favorite Books with GoogleBook API \"), \" \"), \" \", /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchForm, {\n    handleFormSubmit: handleFormSubmit,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), \" \"), \" \"), \" \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, \" \"), \" \", /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SearchResult, {\n    books: books,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), \" \"), \" \");\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/rashawndoyley/Desktop/HomeWork/googlebooks/develop/client/src/pages/Books.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","SearchForm","SearchResult","API","Link","Col","Row","Container","Books","books","setBooks","formObject","setFormObject","search","setSearch","handleFormSubmit","event","preventDefault","googlebooks","then","res","console","log","data","items","results","map","result","volumeInfo","key","id","title","author","authors","description","link","infoLink","handleInputChange","target","name","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AAEA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC,C,CACA;AACA;;AAEA,SAASC,KAAT,GAAiB;AACb;AADa,kBAEaX,QAAQ,CAAC,EAAD,CAFrB;AAAA;AAAA,MAENY,KAFM;AAAA,MAECC,QAFD;;AAAA,mBAGuBb,QAAQ,CAAC,EAAD,CAH/B;AAAA;AAAA,MAGNc,UAHM;AAAA,MAGMC,aAHN;;AAAA,mBAIef,QAAQ,CAAC,EAAD,CAJvB;AAAA;AAAA,MAINgB,MAJM;AAAA,MAIEC,SAJF,kBAKb;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAChCA,IAAAA,KAAK,CAACC,cAAN;AACAd,IAAAA,GAAG,CAACe,WAAJ,CAAgBL,MAAhB,EAAwBM,IAAxB,CAA6B,UAACC,GAAD,EAAS;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAG,CAACG,IAAJ,CAASC,KAA5B;AACA,UAAIC,OAAO,GAAGL,GAAG,CAACG,IAAJ,CAASC,KAAvB;AACAC,MAAAA,OAAO,GAAGA,OAAO,CAACC,GAAR,CAAY,UAACC,MAAD,EAAY;AAC9BN,QAAAA,OAAO,CAACC,GAAR,CAAYK,MAAM,CAACC,UAAnB;AACAD,QAAAA,MAAM,GAAG;AACLE,UAAAA,GAAG,EAAEF,MAAM,CAACG,EADP;AAELA,UAAAA,EAAE,EAAEH,MAAM,CAACG,EAFN;AAGLC,UAAAA,KAAK,EAAEJ,MAAM,CAACC,UAAP,CAAkBG,KAHpB;AAILC,UAAAA,MAAM,EAAEL,MAAM,CAACC,UAAP,CAAkBK,OAJrB;AAKLC,UAAAA,WAAW,EAAEP,MAAM,CAACC,UAAP,CAAkBM,WAL1B;AAMLC,UAAAA,IAAI,EAAER,MAAM,CAACC,UAAP,CAAkBQ;AANnB,SAAT;AAQA,eAAOT,MAAP;AACH,OAXS,CAAV;AAYAjB,MAAAA,QAAQ,CAACe,OAAD,CAAR;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBb,KAArB;AACH,KAjBD;AAkBH,GApBD;;AAsBA,MAAM4B,iBAAiB,GAAG,SAApBA,iBAAoB,CAACrB,KAAD,EAAW;AACjC;AACA;AAFiC,wBAGTA,KAAK,CAACsB,MAHG;AAAA,QAGzBC,IAHyB,iBAGzBA,IAHyB;AAAA,QAGnBC,KAHmB,iBAGnBA,KAHmB;AAIjCnB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAZ,EAAkBC,KAAlB;AACA1B,IAAAA,SAAS,CAAC0B,KAAD,CAAT;AACH,GAND;;AAQA,sBAAS,oBACL,SADK;AACK,IAAA,KAAK,MADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEL,oBACA,SADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA;AACG,IAAA,SAAS,EAAG,YADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFA,MAFK,oBAQO,oBACZ,SADY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEZ,oBACA,GADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA,oBACA,GADA;AACI,IAAA,IAAI,EAAG,IADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA,oBACA,UADA;AACW,IAAA,gBAAgB,EAAKzB,gBADhC;AAEA,IAAA,QAAQ,EAAKsB,iBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,MAFA,MAFY,MARP,oBAoBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SApBP,oBAqBO,oBACZ,SADY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEZ,oBACA,YADA;AACa,IAAA,KAAK,EAAK5B,KADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFY,MArBP,MAAT;AA6BH;;AAED,eAAeD,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport SearchForm from \"../components/Form/searchForm\";\nimport SearchResult from \"../components/Search/searchResult\";\n\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\n// import { List, ListItem } from \"../components/List\";\n// import { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n    // Setting our component's initial state\n    const [books, setBooks] = useState([]);\n    const [formObject, setFormObject] = useState({});\n    const [search, setSearch] = useState(\"\");\n    // // Load all books and store them with setBooks\n    // useEffect(() => {\n    //   loadBooks()\n    // }, [])\n\n    // // Loads all books and sets them to books\n    // function loadBooks() {\n    //   API.getBooks()\n    //     .then(res =>\n    //       setBooks(res.data)\n    //     )\n    //     .catch(err => console.log(err));\n    // };\n\n    // // Deletes a book from the database with a given id, then reloads books from the db\n    // function deleteBook(id) {\n    //   API.deleteBook(id)\n    //     .then(res => loadBooks())\n    //     .catch(err => console.log(err));\n    // }\n\n    // // Handles updating component state when the user types into the input field\n    //  handleInputChange=(event)=>{\n    //   const { name, value } = event.target;\n    //   setFormObject({...formObject, [name]: value})\n    // };\n\n    // // When the form is submitted, use the API.saveBook method to save the book data\n    // // Then reload books from the database\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n        API.googlebooks(search).then((res) => {\n            console.log(\"res\", res.data.items);\n            let results = res.data.items;\n            results = results.map((result) => {\n                console.log(result.volumeInfo);\n                result = {\n                    key: result.id,\n                    id: result.id,\n                    title: result.volumeInfo.title,\n                    author: result.volumeInfo.authors,\n                    description: result.volumeInfo.description,\n                    link: result.volumeInfo.infoLink,\n                };\n                return result;\n            });\n            setBooks(results);\n            console.log(\"books\", books);\n        });\n    };\n\n    const handleInputChange = (event) => {\n        // Destructure the name and value properties off of event.target\n        // Update the appropriate state\n        const { name, value } = event.target;\n        console.log(name, value);\n        setSearch(value);\n    };\n\n    return ( <\n        Container fluid >\n        <\n        Jumbotron >\n        <\n        h1 className = \"text-black\" >\n        Find Your Favorite Books with GoogleBook API <\n        /h1> <\n        /Jumbotron> <\n        Container >\n        <\n        Row >\n        <\n        Col size = \"12\" >\n        <\n        SearchForm handleFormSubmit = { handleFormSubmit }\n        onChange = { handleInputChange }\n        /> <\n        /Col> <\n        /Row> <\n        /Container> <\n        br > < /br> <\n        Container >\n        <\n        SearchResult books = { books }\n        /> <\n        /Container> <\n        /Container>\n    );\n}\n\nexport default Books;"]},"metadata":{},"sourceType":"module"}